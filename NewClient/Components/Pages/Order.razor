@page "/order"
@using NewClient.Models
@using NewClient.Models.Dto
@using NewClient.Services
@using NewClient.Services.Interface
@inject IOrderService OrderService
@inject IDishService DishService
@inject NotificationService NotificationService
@inject IDishSizeService DishSizeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3 class="page-title">Orders</h3>

@if (orders != null && orders.Any())
{
    <div class="max-w-4xl mx-auto mt-8">
        <table class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
            <thead>
                <tr class="text-left bg-gray-100">
                    <th class="px-6 py-3 text-sm font-semibold text-gray-700">Order ID</th>
                    <th class="px-6 py-3 text-sm font-semibold text-gray-700">Order Date</th>
                    <th class="px-6 py-3 text-sm font-semibold text-gray-700">Total</th>
                    <th class="px-6 py-3 text-sm font-semibold text-gray-700">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr @onclick="() => OnOrderClick(order.Id)" class="cursor-pointer hover:bg-gray-100">
                        <td class="px-6 py-4 text-sm font-medium text-gray-800">@order.Id</td>
                        <td class="px-6 py-4 text-sm font-medium text-gray-800">@order.OrderDate.ToString("g")</td>
                        <td class="px-6 py-4 text-sm font-medium text-gray-800">@order.Total.ToString("C")</td>
                        <td class="px-6 py-4 text-sm font-medium text-gray-800">
                            <button class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                                View Details
                            </button>
                            <button class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 ml-2"
                                    @onclick="() => ConfirmDeleteOrder(order.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="max-w-4xl mx-auto mt-8 text-center">
        <p class="text-gray-600 text-lg">No orders found. Start by placing your first order!</p>
    </div>
}

@if (selectedOrder != null)
{
    <div class="fixed inset-0 flex items-center justify-center z-50 bg-gray-900 bg-opacity-50 modal-overlay">
        <div class="bg-white p-6 rounded-lg shadow-lg max-w-4xl w-full relative modal-content">
            <button class="absolute top-2 right-2 text-gray-700 hover:text-gray-900 text-2xl close-modal" @onclick="CloseModal">
                &times;
            </button>

            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Order Details</h2>
            <p><strong class="text-gray-700">Order ID:</strong> @selectedOrder.Id</p>
            <p><strong class="text-gray-700">Order Date:</strong> @selectedOrder.OrderDate.ToString("g")</p>
            <p><strong class="text-gray-700">Total:</strong> @selectedOrder.Total</p>

            <h3 class="text-xl font-semibold text-gray-800 mt-6 mb-2">Items in Order</h3>
            @if (selectedOrder.OrderDetails != null && selectedOrder.OrderDetails.Any())
            {
                <table class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                    <thead>
                        <tr class="text-left bg-gray-100">
                            <th class="px-6 py-3 text-sm font-semibold text-gray-700">Dish Name</th>
                            <th class="px-6 py-3 text-sm font-semibold text-gray-700">Quantity</th>
                            <th class="px-6 py-3 text-sm font-semibold text-gray-700">Size</th>
                            <th class="px-6 py-3 text-sm font-semibold text-gray-700">Price</th>
                            <th class="px-6 py-3 text-sm font-semibold text-gray-700">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in selectedOrder.OrderDetails)
                        {
                            <tr>
                                <td class="px-6 py-4 text-sm font-medium text-gray-800">@item.Dish.Name</td>
                                <td class="px-6 py-4 text-sm font-medium text-gray-800">
                                    <input type="number" min="1" @bind="item.Quantity" 
                                           class="px-2 py-1 border border-gray-300 rounded-md" 
                                           @onblur="() => UpdateOrderItem(item)">
                                </td>
                                <td class="px-6 py-4 text-sm font-medium text-gray-800">
                                    <select @bind="item.Size" class="px-2 py-1 border border-gray-300 rounded-md">
                                        @foreach (var size in sizes)
                                        {
                                            <option value="@size.Size">@size.Size</option>
                                        }
                                    </select>
                                </td>
                                <td class="px-6 py-4 text-sm font-medium text-gray-800">@item.Price)</td>
                                <td class="px-6 py-4 text-sm font-medium text-gray-800">
                                    <button @onclick="() => UpdateOrderItem(item)"
                                            class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                                        Update
                                    </button>
                                    <button @onclick="() => DeleteOrderItem(item.Id)"
                                            class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 ml-2">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-red-500">No items found in this order.</p>
            }

            <h3 class="text-xl font-semibold text-gray-800 mt-6 mb-2">Add Dish to Order</h3>
            <div class="flex items-center space-x-4 mb-4">
                <select @bind="newDishId" 
                        class="px-2 py-1 border border-gray-300 rounded-md">
                    <option value="0">Select Dish</option>
                    @foreach (var dish in dishes)
                    {
                        <option value="@dish.Id">@dish.Name</option>
                    }
                </select>
                <select @bind="newDishSize" 
                        class="px-2 py-1 border border-gray-300 rounded-md">
                    <option value="">Select Size</option>
                    @foreach (var size in sizes)
                    {
                        <option value="@size.Size">@size.Size</option>
                    }
                </select>
                <input type="number" min="1" @bind="newDishQuantity" 
                       placeholder="Quantity" class="px-2 py-1 border border-gray-300 rounded-md">
                <button @onclick="AddDishToOrder" 
                        class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">
                    Add Dish
                </button>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<NewClient.Models.Order> orders;
    private List<OrderDetailDto> orderDetailDtos;
    private NewClient.Models.Order selectedOrder;
    private int newDishId;
    private string newDishSize;
    private int newDishQuantity;
    private List<DishSize> sizes;
    private IEnumerable<Dish> dishes;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrdersAsync();
        dishes = await DishService.GetAllDish();
        sizes = await DishSizeService.GetAllDishSize();
    }

    private async Task OnOrderClick(int orderId)
    {
        selectedOrder = await OrderService.GetOrderByIdAsync(orderId);
    }

    private void CloseModal()
    {
        selectedOrder = null;
    }

    private async Task UpdateOrderItem(OrderDetail item)
    {
        var newItem = new OrderDetailDto()
        {
            DishId = item.DishId,
            OrderId = item.OrderId,
            Price = item.Price,
            Size = item.Size,
            Quantity = item.Quantity
        };
        await OrderService.UpdateOrderDetailAsync(item.Id, newItem);
        await ReloadOrder();
    }

    private async Task DeleteOrderItem(int orderDetailId)
    {
        // Удаляем заказ
        await OrderService.DeleteOrderDetailAsync(orderDetailId);
    
        // Обновляем заказ, чтобы отобразить изменения
        if (selectedOrder?.OrderDetails?.Any() == true)
        {
            // Обновляем заказ по первому блюду в заказе
            var firstItem = selectedOrder.OrderDetails.First();
            var updatedOrderDetail = new OrderDetailDto
            {
                DishId = firstItem.DishId,
                OrderId = selectedOrder.Id,
                Quantity = firstItem.Quantity,
                Size = firstItem.Size
            };
        
            // Выполняем обновление
            await OrderService.UpdateOrderDetailAsync(firstItem.Id, updatedOrderDetail);
        }
    
        // Перезагружаем данные заказа
        await ReloadOrder();
    }

    private async Task AddDishToOrder()
    {
        if (newDishId <= 0 || string.IsNullOrEmpty(newDishSize) || newDishQuantity <= 0)
        {
            await NotificationService.ShowNotification("Please fill in all fields correctly.", "error");
            return;
        }

        var result = await OrderService.AddDishToOrderAsync(selectedOrder.Id, newDishId, newDishQuantity, newDishSize);

        if (result)
        {
            await ReloadOrder();

            // После добавления блюда обновляем заказ по первому блюду
            if (selectedOrder?.OrderDetails?.Any() == true)
            {
                var firstItem = selectedOrder.OrderDetails.First();
                var updatedOrderDetail = new OrderDetailDto
                {
                    DishId = firstItem.DishId,
                    OrderId = selectedOrder.Id,
                    Quantity = firstItem.Quantity,
                    Size = firstItem.Size
                };

                // Обновляем заказ
                await OrderService.UpdateOrderDetailAsync(firstItem.Id, updatedOrderDetail);
            }

            await NotificationService.ShowNotification("Dish added successfully.", "success");
        }
        else
        {
            await NotificationService.ShowNotification("Failed to add dish to order.", "error");
        }
    }

    private async Task ReloadOrder()
    {
        if (selectedOrder != null)
        {
            selectedOrder = await OrderService.GetOrderByIdAsync(selectedOrder.Id);
        }
    }
    private async Task ConfirmDeleteOrder(int orderId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
        if (confirm)
        {
            await OrderService.DeleteOrderAsync(orderId);
            orders = await OrderService.GetAllOrdersAsync();
        }
    }
}

