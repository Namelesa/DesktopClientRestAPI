@page "/dish/{DishId:int}"
@using NewClient.Models
@using NewClient.Models.Dto
@using NewClient.Services
@using NewClient.Services.Interface
@inject IDishService DishService
@inject IDishSizeService DishSizeService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IJSRuntime JS

@code {
    [Parameter]
    public int DishId { get; set; }

    private Dish dish;
    private List<string> sizes = new();
    private string selectedSize;
    private decimal selectedPrice;
    private string errorMessage;
    private bool isLoading = true;
    private bool isEditing = false;
    private string newIngredientName;
    private bool isModalVisible = false;
    private int dishToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dish = await DishService.GetDishById(DishId);

            if (dish == null)
            {
                await NotificationService.ShowNotification("Dish not found.", "error");
                return;
            }

            var dishSizes = await DishSizeService.GetAllDishSize();
            sizes = dishSizes.Select(s => s.Size).ToList();

            var minSize = dishSizes.OrderBy(s => s.Price).FirstOrDefault();
            if (minSize != null)
            {
                selectedSize = minSize.Size;
                selectedPrice = dish.Price + minSize.Price;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowNotification($"Error loading dish details: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SelectSizeAsync(string size)
    {
        selectedSize = size;

        try
        {
            var dishSizes = await DishSizeService.GetAllDishSize();
            var sizeDetails = dishSizes.FirstOrDefault(s => s.Size == size);
            selectedPrice = sizeDetails != null ? dish.Price + sizeDetails.Price : dish.Price;
        }
        catch (Exception)
        {
            await NotificationService.ShowNotification("Failed to calculate price for the selected size.", "error");
        }
    }

    private void ToggleEditMode()
    {
        isEditing = !isEditing;
    }

    private async Task EditDishAsync()
    {
        try
        {
            var dishDto = new DishDto
            {
                Name = dish.Name,
                Price = dish.Price,
                Image = dish.Image,
            };

            bool isUpdated = await DishService.UpdateDish(dish.Id, dishDto);
            if (isUpdated)
            {
                await OnInitializedAsync();
            }
            else
            {
                await NotificationService.ShowNotification("Failed to update the dish.", "error");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowNotification("Error editing dish:", "error");
        }
    }

    private void ShowDeleteModal(int dishId)
    {
        isModalVisible = true;
        dishToDeleteId = dishId;
    }

    private void HideDeleteModal()
    {
        isModalVisible = false;
        dishToDeleteId = 0;
    }

    private async Task DeleteDishAsync()
    {
        try
        {
            bool isDeleted = await DishService.DeleteDish(dishToDeleteId);
            if (isDeleted)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                await NotificationService.ShowNotification("Failed to delete the dish.", "error");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowNotification($"Error deleting dish: {ex.Message}", "error");
        }
        finally
        {
            HideDeleteModal();
        }
    }

    private async Task BuyDishAsync()
    {
    }

    private void RemoveIngredient(int ingredientId)
    {
        var ingredientToRemove = dish.Ingridients.FirstOrDefault(i => i.Id == ingredientId);
        if (ingredientToRemove != null)
        {
            dish.Ingridients.Remove(ingredientToRemove);
        }
    }

    private void AddIngredient()
    {
        if (!string.IsNullOrEmpty(newIngredientName))
        {
            //dish.Ingridients.Add(new Ingredient { Name = newIngredientName });
            newIngredientName = string.Empty;
        }
    }
}


@if (isLoading)
{
    <p>Loading dish details...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-red-500">@errorMessage</p>
}
else
{
    <div class="p-6 bg-white rounded-2xl shadow-lg transition-all duration-300 hover:shadow-2xl">
        @if (!isEditing)
        {
            <div class="mb-4 overflow-hidden rounded-lg">
                <img class="w-full h-auto object-cover transition-transform duration-500 hover:scale-105" src="@dish.Image" alt="@dish.Name" />
            </div>
            <p class="text-gray-800 font-medium mb-2">Price: 
                <span class="text-lg font-bold text-green-600">@selectedPrice</span>
            </p>
            <h3 class="text-gray-900 font-semibold mb-2">Select Size:</h3>
            <div class="flex space-x-2 mb-4">
                @foreach (var size in sizes)
                {
                    <button @onclick="() => SelectSizeAsync(size)" 
                            class="flex-1 p-2 rounded transition duration-200 
                                   @(selectedSize == size ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-800")">
                        @size
                    </button>
                }
            </div>
            <h3 class="text-gray-900 font-semibold mb-2">Ingredients:</h3>
            <ul class="list-disc list-inside text-gray-700 mb-4">
                @foreach (var ingredient in dish.Ingridients)
                {
                    <li>@ingredient.Name</li>
                }
            </ul>
            <div class="flex space-x-4 mt-4">
                <button @onclick="ToggleEditMode" class="button-primary">
                    Edit
                </button>
                <button @onclick="() => ShowDeleteModal(dish.Id)" class="button-danger">
                    Delete
                </button>
                <button @onclick="BuyDishAsync" class="button-success">
                    Buy
                </button>
            </div>
        }
        @if (isEditing)
        {
            <h3 class="text-gray-900 font-semibold mb-4">Edit Dish</h3>
            <div class="flex flex-col space-y-4">
                <input @bind="dish.Name" placeholder="Dish Name" class="p-2 border border-gray-300 rounded" />
                <input @bind="dish.Image" placeholder="Dish Image URL" class="p-2 border border-gray-300 rounded" />
                <input @bind="dish.Price" placeholder="Dish Price" type="number" class="p-2 border border-gray-300 rounded" />

                <h4 class="text-gray-900 font-semibold mb-2">Ingredients:</h4>
                <ul class="list-disc list-inside text-gray-700 mb-4">
                    @foreach (var ingredient in dish?.Ingridients)
                    {
                        <li>
                            @ingredient.Name
                            <button @onclick="() => RemoveIngredient(ingredient.Id)" class="ml-2 text-red-600 hover:text-red-800 transition duration-200">
                                Remove
                            </button>
                        </li>
                    }
                </ul>

                <div class="flex items-center space-x-4">
                    <input @bind="newIngredientName" placeholder="New ingredient" class="p-2 border border-gray-300 rounded flex-1" />
                    <button @onclick="AddIngredient" class="button-success">
                        Add
                    </button>
                </div>

                <div class="flex space-x-4 mt-4">
                    <button @onclick="EditDishAsync" class="button-success">
                        Save Changes
                    </button>
                    <button @onclick="ToggleEditMode" class="button-secondary">
                        Cancel
                    </button>
                </div>
            </div>
        }
    </div>
}

@if (isModalVisible)
{
    <div class="modal show">
        <div class="modal-content">
            <button @onclick="HideDeleteModal" class="modal-close">&times;</button>
            <div class="modal-header">Are you sure you want to delete this dish?</div>
            <div class="modal-body">
                <p>This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button @onclick="DeleteDishAsync" class="button-danger">Delete</button>
                <button @onclick="HideDeleteModal" class="button-secondary">Cancel</button>
            </div>
        </div>
    </div>
}
